########################################################## {COPYRIGHT-TOP} #####
# Licensed Materials - Property of IBM
#
# 5725-E59
#
# (C) Copyright IBM Corp. 2008, 2011 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication, or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
########################################################## {COPYRIGHT-END} #####
#---------------------------------------------------------------------------------------
# The following properties specify the delegate to call for a transaction response when
# the transaction standard is configured in the Business Transaction Manager
# (TxManager.properties) to use a response handler.  This setup effectively facilitates
# "chained" transactions where one transaction request can be based on the result of the
# previous transaction response.
#
# To set up the "chaining" of delegates, there must be at least one property for the set of
# "chained" transactions.  At a minimum, there will always be the property name that equals to
# a custom transaction name.
# 
# NOTE: It is important that you use a custom transaction name as a "container" of chained
# transactions, and not an industry standard transaction name.  Since you may possibly set up
# both a handler and a response handler for any particular message standard, you should use
# the industry standard transaction name for a single transaction, and a custom transaction name
# for the entry point to a chained transaction.
#
# For example, for a simple 1-level "chaining" (which comprises of two transactions,
# one depending of the response of the previous one), a custom transaction name
# (e.g. DWL1LevelTrans) triggers the first industry standard transaction
# (e.g. holdingSearch) in the backend, the response of which triggers another industry standard transaction
# (e.g. holdingInquiry) in the backend.
# 
# The property format will be:
#   DWL1LevelTrans=DelegateClassName,XSLT
#   holdingSearchDWL1LevelTrans=DelegateClassName,XSLT (optional
#                         if the last response is needed to be processed by the response handler)
#
# where the DelegateClassName is the class that implements the ITxRx.processTx(String, Object)
# method to handle response chaining and the XSLT is the stylesheet to apply to the response
# to format the following request.
#
# For an n-level "chaining" (which comprises of n+1 transactions,
# one depending of the response of the previous one), a custom transaction name
# (e.g. DWL1LevelTrans) triggers the first industry standard transaction
# (e.g. trans1) in the backend, until the last transaction
# (e.g. transn+1) in the backend.
# 
# You need to have a set of properties to complete the chaining.  The format will be:
#   DWL1LevelTrans=DelegateClassName,XSLT
#   trans1DWL1LevelTrans=DelegateClassName,XSLT
#     ... DWL1LevelTrans=DelegateClassName,XSLT
#     ... DWL1LevelTrans=DelegateClassName,XSLT
#   transn+1 ... trans1DWL1LevelTrans=DelegateClassName,XSLT
#
#---------------------------------------------------------------------------------------

# A generic composite delegate entry uses 'CompositeTxn' as the key.
# The CompositeDelegateImpl will handl the chain based on composite request and response.
CompositeTxn=com.dwl.base.composite.txn.CompositeDelegateImpl
